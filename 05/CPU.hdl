// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Or(a=false, b=instruction[15], out=cInstruction);
    And(a=cInstruction, b=instruction[5], out=ALoadIfCInstr);
    And(a=cInstruction, b=instruction[4], out=DLoadIfCInstr);

    Mux(a=true, b=ALoadIfCInstr, sel=cInstruction, out=ARegLoad);
    Mux16(a=instruction, b=ALUOut, sel=cInstruction, out=AMuxOut);
    ARegister(in=AMuxOut, load=ARegLoad, out=ARegOut);
    DRegister(in=ALUOut, load=DLoadIfCInstr, out=DRegOut);

    // Write to memory if C instruction
    And(a=instruction[3], b=cInstruction, out=writeM);
    Or16(a=false, b=ARegOut, out[0..14]=addressM);
    Or16(a=false, b=ALUOut, out=outM);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AMRegOut);

    ALU(
        x=DRegOut, y=AMRegOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f =instruction[7],
        no=instruction[6],
        out=ALUOut,
        zr=ALUZr,
        ng=ALUNg
    );

    Not(in=ALUZr, out=NotZr);
    Not(in=ALUNg, out=NotNg);
    And(a=NotNg, b=NotZr, out=ALUGt);

    Not(in=instruction[2], out=NGT);
    Not(in=instruction[0], out=NLT);
    Not(in=instruction[1], out=NNEQ);
    And(a=NGT, b=instruction[0], out=GTCond);
    And(a=NLT, b=instruction[2], out=LTCond);

    And(a=NNEQ, b=instruction[0], out=NEQHalfCond);
    And(a=NEQHalfCond, b=instruction[2], out=NEQFullCond);

    And(a=instruction[0], b=instruction[1], out=JMPHalf);
    And(a=JMPHalf, b=instruction[2], out=JMP);

    And(a=ALUZr, b=instruction[1], out=EQ);
    And(a=NotZr, b=NEQFullCond, out=NEQ);
    And(a=ALUGt, b=GTCond, out=GT);
    And(a=ALUNg, b=LTCond, out=LT);

    Or16Way(in[0]=EQ, in[1]=GT, in[2]=LT, in[3]=NEQ, in[4]=JMP, out=PCLoad);
    And(a=PCLoad, b=cInstruction, out=PCLoadIfCInstr);

    PC(reset=reset, load=PCLoadIfCInstr, in=ARegOut, inc=true, out[0..14]=pc);

}